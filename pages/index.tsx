import React from "react";
const QuickChart = require("quickchart-js");

const chart = new QuickChart();
const Index: React.FC<{ coinData: any; chartArr: any }> = ({
  coinData,
  chartArr,
}) => {
  // console.log(chartArr)
  return (
    <div>
      <h1>Top Coins by Market Capitalization</h1>
      {/* <input type="text" placeholder="Search" /> */}
      <table className="">
        <thead>
          {/* <tr>
            <td>Coin</td>
            <td>Symbol</td>
            <td>Price</td>
            <td>Volume</td>
            <td>Price Change</td>
            <td>Market Cap</td>
          </tr> */}
        </thead>
        <tbody>
          {coinData.map((coin: any, i: number) => (
            <tr key={coin.id}>
              <td className="">
                <span>
                  <img
                    src={`${coin.image}`}
                    width="7%"
                    height="7%"
                    className="inline mr-2"
                    alt={`${coin.name}`}
                    title={coin.name}
                  />
                </span>
                <span>{coin.name}</span>
              </td>
              <td>{coin.symbol.toUpperCase()}</td>
              <td>
                ${Intl.NumberFormat().format(coin.current_price.toFixed(2))}
              </td>
              {/* <td>
                ${Intl.NumberFormat().format(coin.total_volume.toFixed(2))}
              </td> */}

              <td
                className={`${
                  coin.price_change_percentage_24h > 0
                    ? "text-green-600"
                    : "text-red-600"
                }`}
              >
                {coin.price_change_percentage_24h.toFixed(2)}%
              </td>
              {/* <td>
                {`Mkt Cap: $ 
                ${Intl.NumberFormat().format(coin.market_cap.toFixed(2))}`}
              </td> */}
              <td>
                <img
                  src={`images/chart${i + 1}.png`}
                  alt="chart img"
                  width="17%"
                  height="17%"
                />
                {/* <img
                  src="https://quickchart.io/chart?c=%7Btype:%27line%27,data:%7Blabels:%5B1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169%5D,datasets:%5B%7Bdata:%5B0.7152207189605583,0.7154894719666399,0.7158245580078538,0.7107930798400998,0.7100149452498318,0.705393882025261,0.7164066652165717,0.7156984632954168,0.7234127674638116,0.7184181915220194,0.7196354797082063,0.7233089159885445,0.7198678401629927,0.7253144215745413,0.7227119816690587,0.7249653167914017,0.7255258559860935,0.7288893004358608,0.7357965948903021,0.7362302063009697,0.7362747094058929,0.7372713555631762,0.7379279391353145,0.7351284317114019,0.7345246440460642,0.7333307472512183,0.7288645701099484,0.7256221325586528,0.7237618915355252,0.7276276768116546,0.7172110130410482,0.7205665489822932,0.7155113840039736,0.7136136679058807,0.7184972896584192,0.7109736943122242,0.7165397526403766,0.7179539763855493,0.7214538374158096,0.7257796279293969,0.7269163385981516,0.7295732664620987,0.7402434059988691,0.7583231568511758,0.7889274211113438,0.783183567289556,0.7817869412833018,0.7714194884829497,0.7841840326223279,0.7745286002919644,0.778420775475118,0.7816588092801973,0.781091128233231,0.7805268572570243,0.7713454930852575,0.7709311509439655,0.7760334026960223,0.7785833389099855,0.778708256945552,0.7784042529306429,0.7756535033824149,0.7844635894640658,0.7819437090203228,0.7835651082566468,0.7877335942179761,0.7992597214944986,0.7955036466937058,0.7946203547283066,0.7892271118406221,0.7877681833890724,0.786066574479264,0.7886914342640595,0.7790000716170158,0.7779785900165556,0.7739972831090601,0.777905630553539,0.7767674238760671,0.7787817227194395,0.7793851467179618,0.7809473177110506,0.77018215608217,0.7733600277122331,0.7721044900910297,0.7734757312369267,0.7753390760765785,0.7768318151553312,0.7795246710595484,0.780769656532986,0.783019280200015,0.7796754715248541,0.7773023165895044,0.7742027706671871,0.7762681214158165,0.7796199182413468,0.7807486466911999,0.7812152944733176,0.7791643728551954,0.7847961523280368,0.7818156242871507,0.7794842016757233,0.7770563433324285,0.7792637725907091,0.7808092789678837,0.7806083414471885,0.7807273769705564,0.7763434876695774,0.771026096299388,0.7634188961811166,0.7687014061170651,0.7699783189340186,0.7710748119375888,0.7678812926585635,0.7537394037896591,0.7499449475831418,0.7583497334838192,0.7599976289827447,0.7583991548436295,0.7326245864230017,0.7362491269222203,0.7383736900589288,0.7355230695259937,0.7362036730828717,0.7381255428901108,0.7394661506115877,0.741144539023142,0.7497987306030972,0.7459919506543156,0.7473812434000956,0.7439465782598922,0.7474568569652685,0.7566010753993666,0.7615375148225427,0.7594688471020881,0.7586365664880944,0.7624503054366484,0.7660740944386115,0.768929704011099,0.7719855989589516,0.769203570594031,0.7701749982837405,0.7686776474279692,0.7741514149074177,0.7699903567768727,0.7675273928991936,0.7657215403995621,0.7634661998183783,0.7656283846243065,0.7680873214198779,0.7681740842511772,0.7702190970082631,0.7740355985497328,0.7769819517504737,0.774176266820926,0.7725044300118402,0.7708235040829938,0.7715306767787772,0.7732607739856026,0.7703690662288207,0.772086228120855,0.7728009738753815,0.7751261961332099,0.7679860470780905,0.770327029038725,0.7698568648968058,0.7686071006859457,0.7671381013216475,0.7687545669110125,0.7690054039210179,0.7629645422989652%5D,fill:false,borderWidth:5,pointRadius:0%7D%5D%7D,options:%7Blegend:%7Bdisplay:false%7D,scales:%7BxAxes:%5B%7Bdisplay:false,gridLines:%7Bdisplay:false%7D%7D%5D,yAxes:%5B%7Bdisplay:false,gridLines:%7Bdisplay:false%7D%7D%5D%7D%7D%7D&w=500&h=300&bkg=%2523ffffff&f=png&v=2.9.4"
                  alt="chart img"
                  width="10%"
                  height="10%"
                /> */}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};
export default Index;
export const getStaticProps: any = async () => {
  const fetchCoinList: any = await fetch(
    "https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=10&page=1&sparkline=false"
  );
  const coinData: any = await fetchCoinList.json();

  async function getCoinChart(coin: string, i: number) {
    const fetchChart = await fetch(
      `https://api.coingecko.com/api/v3/coins/${coin}/market_chart?vs_currency=usd&days=7`
    );
    const getChart = await fetchChart.json();
    const index: number[] = [];
    const data: number[] = [];
    getChart.prices.map((x: any, i: number) => {
      index.push(i + 1);
      data.push(x[1]);
    });

    chart.setWidth(500);
    chart.setHeight(300);

    chart.setConfig({
      type: "line",
      data: {
        labels: index,
        datasets: [
          {
            borderColor: ["#add8e6"],
            data: data,
            fill: false,
            borderWidth: 5,
            pointRadius: 0,
          },
        ],
      },
      options: {
        legend: {
          display: false,
        },
        scales: {
          xAxes: [
            {
              display: false,
              gridLines: {
                display: false,
              },
            },
          ],
          yAxes: [
            {
              display: false,
              gridLines: {
                display: false,
              },
            },
          ],
        },
      },
    });

    // Print the chart URL
    // console.log(chart.getUrl());
    chart.toFile(`public/images/chart${i}.png`);
    return;
  }
  coinData.map((coin: any, i: number) => {
    return getCoinChart(coin.id, i + 1);
  });
  return {
    props: { coinData },
    revalidate: 120,
  };
};
